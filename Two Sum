// The following is the solution for Two sum (Leetcode 1)

/*
Given an array of integers nums and an integer target, return indices of the two numbers such that they add up to target.

You may assume that each input would have exactly one solution, and you may not use the same element twice.

You can return the answer in any order.
*/


//Python:
//Brute O(N^2)
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
       for i in range(len(nums)-1):
            for j in range(i+1,len(nums)):
                if nums[i]+nums[j] == target:
                    return([i,j])

//Optimized
class Solution:
    def twoSum(self, nums: List[int], target: int) -> List[int]:
       map={}
       for i in range(len(nums)):
        left = target - nums[i]
        if left in map:
            return([map[left],i])
        map[nums[i]]=i


//C++
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) 
    {
        vector<int> ret;
        int size,diff;
        size=nums.size();
        unordered_map<int,int> m;
        for(int i =0; i<size; i++)
        {
            diff=target-nums[i];
            if(m.find(diff)!=m.end() and m.find(diff)->second!=i)
            {
                ret.push_back(i);
                ret.push_back(m.find(diff)->second);
                return ret;
            }
            m[nums[i]]=i;
        }
        return ret;
    }
};
    
//Code II (Slightly shorter, more intuitive for myself):

class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {
        unordered_map<int,int> m;
        vector<int> res;
        for(int i=0;i<nums.size();i++)
        {
            if(m.find(target - nums[i]) != m.end())
            {
                res.push_back(i);
                res.push_back(m[target - nums[i]]);
            }
            else
            {
                m[nums[i]] = i;
            }
        }
        return res;
    }
};
