This file contains the solution to Q.15 on Leetcode 3 Sum

/*
Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.
*/

//Code:

class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) 
    {
        vector<vector<int>> res;
        int n=nums.size();
        sort(nums.begin(),nums.end());
        
        if(n<3)
        {
            return res;
        }
        
        for(int i=0; i<n-2; i++)
        {
            if(nums[i]>0)
            {
                return res;
            }
            if(i>0 && nums[i]==nums[i-1])
            {
                continue;
            }
            
            int j=i+1, k=n-1;
            
            while(j<k)
            {
                int sum=nums[i]+nums[j]+nums[k];
                
                if(sum<0)
                {
                    j++;
                }
                else if(sum>0)
                {
                    k--;
                }
                else
                {
                    res.push_back({nums[i],nums[j],nums[k]});
                    while(j<k && nums[j]==nums[j+1])
                    {
                        j++;
                    }
                    j++;
                    while(j<k && nums[k]==nums[k-1])
                    {
                        k--;
                    }
                    k--;
                            
                }
            }
        }
        return res;
    }
}; 
