This file contains the solution to Q.74 in Leetcode - Search a 2D matrix

//Code:
class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int lowrow=0, hirow=matrix.size()-1;
        int mid=0;
        while(lowrow < hirow)
        {
            mid = lowrow + (hirow-lowrow)/2;
            
            if(target == matrix[mid][0])
            {
                return true;
            }
            
            if(target>matrix[mid][0] && target<matrix[mid+1][0])
            {
                lowrow=mid;
                break;
            }
            
            if( target>matrix[mid][0])
            {
                lowrow=mid +1 ;
            }
            else
            {
                hirow = mid-1;
            }
        }
        
        int lowcol=0, hicol=matrix[0].size()-1;
        while(lowcol<=hicol)
        {
            mid = lowcol + (hicol-lowcol)/2;
            if(matrix[lowrow][mid]== target)
            {
                return true;
            }
            else if(matrix[lowrow][mid]<target)
            {
                lowcol=mid+1;
            }
            else
            {
                hicol=mid-1;
            }
        }
        return false;
    }
};


//Code(P-2)(took a day)

class Solution {
public:
    bool searchMatrix(vector<vector<int>>& matrix, int target) 
    {
        int rows = matrix[0].size();
        int cols = matrix.size();

        int left = 0;
        int right = rows - 1;
        int top = 0;
        int down = cols - 1;

        while(top < down)
        {
            int mid = top + (down-top)/2;
            if(target == matrix[mid][0])
            {
                return true;
            }
            else if(target < matrix[mid][0])
            {
                down = mid - 1;
            }
            else if(target > matrix[mid][0] && target <= matrix[mid][right])
            {
                top = mid;
                break;
            }
            else
            {
                top = mid+1;
            }
        }

        while(left <= right)
        {
            int mid =left + (right-left)/2;
            if(target == matrix[top][mid])
            {
                return true;
            }
            else if(target > matrix[top][mid])
            {
                left = mid+1;
            }
            else if(target< matrix[top][mid])
            {
                right = mid-1;
            }
        }
        return false;
    }
};
